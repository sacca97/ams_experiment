The commit message contains some relevant words: HTTP
The commit changes code containing relevant methods/parameters: HTTP
The commit changes some relevant files: modules/http2/h2_session.c, modules/http2/h2_stream.c, modules/http2/h2_request.c, modules/http2/h2.h
The commit message and the advisory description contain the following keywords: request
An advisory keyword is contained in the changed files: request
The commit message references some github issue: 137, 142
Merge r1881620, r1881635 from trunk: Process early errors via a dummy HTTP/1.1 request as well Process early errors via a dummy HTTP/1.1 request as well to ensure that the request gets logged correctly and possible custom error pages are considered. The previous way of directly sending a HTTP/2 answer with the HTTP status code appropriate for the error is more efficient, but does not log the request nor sents a possible custom error page. * modules/http2/h2.h: Add http_status to h2_request struct and define   H2_HTTP_STATUS_UNSET. * modules/http2/h2_request.c(h2_request_create_rec): Check if   http_status is set for the request and die with the   status code it contains if set. * modules/http2/h2_session.c(on_header_cb): Adjust the error condition   now that we mark early errors via http_status: Only return an error   if the status is not success and http_status is not H2_HTTP_STATUS_UNSET. * modules/http2/h2_stream.c(set_error_response): Set http_status   on the request instead of creating headers for a response and a   respective brigade. Github: closes #137 * Changelog for r1881620 Submitted by: rpluem Reviewed by: rpluem, giovanni, ylavic Github: closes #142 git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x@1883475 13f79535-47bb-0310-9956-ffa450edef68
The commit message contains some relevant words: HTTP
The commit changes code containing relevant methods/parameters: HTTP
The commit changes some relevant files: modules/http2/h2_session.c, modules/http2/h2_stream.c, modules/http2/h2_request.c, modules/http2/h2.h
The commit message and the advisory description contain the following keywords: request
An advisory keyword is contained in the changed files: request
The commit message references some github issue: 137
Process early errors via a dummy HTTP/1.1 request as well Process early errors via a dummy HTTP/1.1 request as well to ensure that the request gets logged correctly and possible custom error pages are considered. The previous way of directly sending a HTTP/2 answer with the HTTP status code appropriate for the error is more efficient, but does not log the request nor sents a possible custom error page. * modules/http2/h2.h: Add http_status to h2_request struct and define   H2_HTTP_STATUS_UNSET. * modules/http2/h2_request.c(h2_request_create_rec): Check if   http_status is set for the request and die with the   status code it contains if set. * modules/http2/h2_session.c(on_header_cb): Adjust the error condition   now that we mark early errors via http_status: Only return an error   if the status is not success and http_status is not H2_HTTP_STATUS_UNSET. * modules/http2/h2_stream.c(set_error_response): Set http_status   on the request instead of creating headers for a response and a   respective brigade. Github: closes #137 git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/trunk@1881620 13f79535-47bb-0310-9956-ffa450edef68
The commit message contains some relevant words: mod_proxy_wstunnel
The commit changes code containing relevant methods/parameters: URL, HTTP
The commit changes some relevant files: modules/proxy/mod_proxy_http.c, modules/proxy/mod_proxy_wstunnel.c
The commit message and the advisory description contain the following keywords: allow, tunnel, upgrade
An advisory keyword is contained in the changed files: tunnel
Backport to v2.4:   *) mod_proxy_http: handle upgrade/tunneling protocols. BZ 61616 is about                      mod_proxy_connect but there has been wstunnel reports                      on dev@ about that too lately.      trunk patch: https://svn.apache.org/r1678771                   https://svn.apache.org/r1832348                   https://svn.apache.org/r1869338                   https://svn.apache.org/r1869420                   https://svn.apache.org/r1878367                   https://svn.apache.org/r1877557                   https://svn.apache.org/r1877558                   https://svn.apache.org/r1877646                   https://svn.apache.org/r1877695                   https://svn.apache.org/r1879401                   https://svn.apache.org/r1879402                   https://svn.apache.org/r1880200                   https://svn.apache.org/r1885239                   https://svn.apache.org/r1885240                   https://svn.apache.org/r1885244      2.4.x patch: http://people.apache.org/~ylavic/patches/2.4.x-mod_proxy_http-upgrade-4on5-v2.patch                   https://github.com/apache/httpd/pull/158      +1: ylavic, covener, minfrin      ylavic: All the corresponding trunk changes to mod_proxy_wstunnel (but              r1885239) have been dropped for this backport proposal, the goal              being to handle upgrade in mod_proxy_http from now, while r1885239              allows to benefit from the Upgrade improvements done in proxy_http              with existing wstunnel configurations (provided mod_proxy_http              module is loaded). git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x@1885605 13f79535-47bb-0310-9956-ffa450edef68
The commit message contains some relevant words: mod_proxy_wstunnel, URL
The commit changes code containing relevant methods/parameters: URL, HTTP
The commit changes some relevant files: modules/proxy/mod_proxy_http.c, modules/proxy/mod_proxy_wstunnel.c
The commit message and the advisory description contain the following keywords: configure, tunnel, upgrade, allow, request
An advisory keyword is contained in the changed files: tunnel
mod_proxy_wstunnel: leave Upgrade requests handling to mod_proxy_http. Let mod_proxy_http's canon and scheme handlers accept "ws[s]:" schemes so that mod_proxy_wstunnel can decline requests when mod_proxy_http is loaded. * modules/proxy/{mod_proxy.h,proxy_util.c} (ap_proxy_worker_can_upgrade):   Add a "dflt" argument to ap_proxy_worker_can_upgrade() which, if not NULL,   is matched when no worker upgrade= parameter is configured. This allows to   handle the default "Upgrade: websocket" case for "ws[s]:" schemes. * modules/proxy/mod_proxy_http.c (proxy_http_canon, proxy_http_handler):   Add and use the new get_url_scheme() helper to parse URL schemes handled by   mod_proxy_http and use it in canon and scheme handlers. This helper now   accepts ws[s] schemes. * modules/proxy/mod_proxy_wstunnel.c (proxy_wstunnel_post_config):   New post_config hook to detect whether mod_proxy_http is loaded and set   global fallback_to_mod_proxy_http flag in this case. * modules/proxy/mod_proxy_wstunnel.c (proxy_wstunnel_check_trans,                                       proxy_wstunnel_canon,                                       proxy_wstunnel_handler):   These hooks now early return DECLINED if fallback_to_mod_proxy_http is set. git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/trunk@1885239 13f79535-47bb-0310-9956-ffa450edef68
The commit message contains some relevant words: mod_proxy_wstunnel
The commit changes code containing relevant methods/parameters: URL, HTTP
The commit changes some relevant files: modules/proxy/mod_proxy_wstunnel.c
The commit message and the advisory description contain the following keywords: allow, tunnel, request, upgrade
An advisory keyword is contained in the changed files: tunnel
Merge r1776290, r1869399 from trunk: let wstunnel run first Since wstunnel can step aside based on the Upgrade: header. mod_proxy: Add proxy check_trans hook. This allows proxy modules to decline request handling at early stage. Then mod_proxy_wstunnel can implement that hook to verify that an Upgrade is requested, and otherwise hand over to mod_proxy_http. Submitted by: covener, ylavic Reviewed by: jim, rpluem, jfclere git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x@1883534 13f79535-47bb-0310-9956-ffa450edef68
The commit changes code containing relevant methods/parameters: URL, HTTP
The commit changes some relevant files: modules/md/md_http.c, modules/md/md_http.h
The commit message and the advisory description contain the following keywords: configure, version, authorization, server, allow, request
An advisory keyword is contained in the changed files: version
The commit message references some github issue: 216, 222, 227, 233, 239
*) mod_md: v2.4.0 with improvements and bugfixes      - MDPrivateKeys allows the specification of several types. Beside "RSA" plus       optional key lengths elliptic curves can be configured. This means you can       have multiple certificates for a Managed Domain with different key types.      With ```MDPrivateKeys secp384r1 rsa2048``` you get one ECDSA  and one RSA       certificate and all modern client will use the shorter ECDSA, while older       client will get the RSA certificate.      Many thanks to @tlhackque who pushed and helped on this.      - Support added for MDomains consisting of a wildcard. Configuring       ```MDomain *.host.net``` will match all virtual hosts matching that pattern       and obtain one certificate for it (assuming you have 'dns-01' challenge       support configured). Addresses #239.      - Removed support for ACMEv1 servers. The only known installation used to       be Let's Encrypt which has disabled that version more than a year ago for       new accounts.      - Andreas Ulm (<https://github.com/root360-AndreasUlm>) implemented the       ```renewing``` call to ```MDMessageCmd``` that can deny a certificate       renewal attempt. This is useful in clustered installations, as       discussed in #233).      - New event ```challenge-setup:<type>:<domain>```, triggered when the       challenge data for a domain has been created. This is invoked before the       ACME server is told to check for it. The type is one of the ACME challenge       types. This is invoked for every DNS name in a MDomain.      - The max delay for retries has been raised to daily (this is like all       retries jittered somewhat to avoid repeats at fixed time of day).      - Certain error codes reported by the ACME server that indicate a problem       with the configured data now immediately switch to daily retries. For       example: if the ACME server rejects a contact email or a domain name,       frequent retries will most likely not solve the problem. But daily retries       still make sense as there might be an error at the server and un-supervised       certificate renewal is the goal. Refs #222.      - Test case and work around for domain names > 64 octets. Fixes #227.      When the first DNS name of an MD is longer than 63 octets, the certificate      request will not contain a CN field, but leave it up to the CA to choose one.      Currently, Lets Encrypt looks for a shorter name in the SAN list given and      fails the request if none is found. But it is really up to the CA (and what      browsers/libs accept here) and may change over the years. That is why      the decision is best made at the CA.      - Retry delays now have a random +/-[0-50]% modification applied to let       retries from several servers spread out more, should they have been       restarted at the same time of day.      - Fixed several places where the 'badNonce' return code from an ACME server       was not handled correctly. The test server 'pebble' simulates this behaviour       by default and helps nicely in verifying this behaviour. Thanks, pebble!      - Set the default `MDActivationDelay` to 0. This was confusing to users that      new certificates were deemed not usably before a day of delay. When clocks are      correct, using a new certificate right away should not pose a problem.      - When handling ACME authorization resources, the module no longer requires       the server to return a "Location" header, as was necessary in ACMEv1.       Fixes #216.      - Fixed a theoretical uninitialized read when testing for JSON error responses       from the ACME CA. Reported at <https://bz.apache.org/bugzilla/show_bug.cgi?id=64297>.      - ACME problem reports from CAs that include parameters in the Content-Type       header are handled correctly. (Previously, the problem text would not be       reported and retries could exist CA limits.)      - Account Update transactions to V2 CAs now use the correct POST-AS-GET method.        Previously, an empty JSON object was sent - which apparently LE accepted,       but others reject. git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/trunk@1887337 13f79535-47bb-0310-9956-ffa450edef68
The commit changes code containing relevant methods/parameters: HTTP
The commit changes some relevant files: modules/http/http_core.c
The commit message and the advisory description contain the following keywords: server, request
An advisory keyword is contained in the changed files: server
Merge r1887999 from trunk    * modules/http/http_core.c server/protocol.c:      Make sure that conn->keepalive is NOT reset after being set in ap_read_request() Submitted by: jfclere Reviewed by: jfclere, covener, ylavic Backported by: jailletc36 git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x@1888926 13f79535-47bb-0310-9956-ffa450edef68
The commit changes code containing relevant methods/parameters: HTTP
The commit changes some relevant files: modules/http2/h2_headers.c, modules/http2/h2_h2.c, modules/http2/h2_config.c, modules/http2/h2_task.c, modules/http2/h2_request.c, modules/http2/h2_stream.h, modules/http2/h2_task.h, docs/manual/mod/mod_http2.xml, modules/http2/h2_headers.h, modules/http2/h2_mplx.c, modules/http2/h2_version.h, modules/http2/h2_config.h, modules/http2/h2_bucket_beam.c
The commit message and the advisory description contain the following keywords: configure, connection, request, version
An advisory keyword is contained in the changed files: request, version
*) mod_http2: sync with github standalone version 1.15.17      - Log requests and sent the configured error response in case of early detected        errors like too many or too long headers. [Ruediger Pluem]      - new option 'H2OutputBuffering on/off' which controls the buffering of stream output.        The default is on, which is the behaviour of older mod-h2 versions. When off, all        bytes are made available immediately to the main connection for sending them        out to the client. This fixes interop issues with certain flavours of gRPC, see        also <https://github.com/icing/mod_h2/issues/207>. git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x@1888011 13f79535-47bb-0310-9956-ffa450edef68
The commit changes code containing relevant methods/parameters: HTTP
The commit changes some relevant files: modules/http/http_core.c
The commit message and the advisory description contain the following keywords: request
An advisory keyword is contained in the changed files: server
Make sure that conn->keepalive is NOT reset after being set in ap_read_request(). git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/trunk@1887999 13f79535-47bb-0310-9956-ffa450edef68
Merge r1879285, r1879322, r1879345, r1879346, r1879465, r1879469, r1879470, r1879488, r1879541, r1879548 from trunk: "[mod_dav_fs etag handling] should really honor the FileETag setting". - It now does. - Add "Digest" to FileETag directive, allowing a strong ETag to be   generated using a file digest. - Add ap_make_etag_ex() and ap_set_etag_fd() to allow full control over   ETag generation. - Add concept of "binary notes" to request_rec, allowing packed bit flags   to be added to a request. - First binary note - AP_REQUEST_STRONG_ETAG - allows modules to force   the ETag to a strong ETag to comply with RFC requirements, such as those   mandated by various WebDAV extensions. Be defensive when the request is missing. Remove tabs. Use a dedicated constant for the base64 sha1 length. Be defensive when calculating the digest. Make sure the offset is initialised to zero before reading the current offset. Seek to the start of the file when calculating the ETag. Add log numbers to util_etag.c. Add MMAP support to ETag generation. Use a brigade instead of direct reads, allow APR to handle MMAP. Bump the logno. Submitted by: minfrin Reviewed by: minfrin, jim, ylavic git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x@1887384 13f79535-47bb-0310-9956-ffa450edef68
